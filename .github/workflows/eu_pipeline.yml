name: 'Infra Deployment East US'

on:
  workflow_dispatch:
    inputs:
      workspace:
        description: "Which TF workspace to deploy"
        required: true
        default: "dev"
        type: choice
        options:
          - Dev
          - QA
          - Prod
          
permissions:
  id-token: write  # Add this line to enable OIDC token request
  contents: read   # Required for checking out the repository

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment:  ${{ inputs.workspace }}
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      TFE_TOKEN: ${{ secrets.TFE_TOKEN }}
      TF_WORKSPACE:  ${{ github.event.inputs.workspace }}
      
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        # Change the working directory based on our environment
        working-directory: ${{ github.workspace }}/Infra/east_us

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.8.5

    - name: Setup Terraform Enterprise Workspace
      run: |
        terraform login
        echo $TFE_TOKEN | terraform login --token
        terraform workspace select $TF_WORKSPACE || terraform workspace new $TF_WORKSPACE

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init 
      run: terraform init -reconfigure 
     
    # Generates an execution plan for Terraform
    - name: Terraform Plan 
      run: terraform plan -var-file=env/${{ github.event.inputs.workspace }}.tfvars
     
    - name: Create Approval Issue
      uses: trstringer/manual-approval@v1
      with:
             secret: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
             approvers: adarshashokk
             minimum-approvals: 1
             issue-title: "Deploying ${{ github.event.inputs.workspace }} to ${{ github.event.inputs.workspace }}"
             issue-body: |
               Review the Terraform plan, then approve or deny the deployment of v1.0.0 to ${{ github.event.inputs.workspace }}.
               - [ ] Approve
               - [ ] Deny
       
    - name: Terraform Apply
      run: terraform apply -var-file=env/${{ github.event.inputs.workspace }}.tfvars -auto-approve
