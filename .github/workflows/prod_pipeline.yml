name: 'Infra prod Deployment East US'

on:
  push:
    branches:
      - qa-en # Triggers when a merge occurs into the qa branch

          
permissions:
  id-token: write  # Add this line to enable OIDC token request
  contents: read   # Required for checking out the repository

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment:  "Prod"
    env:
      TFE_TOKEN: ${{ secrets.TFE_TOKEN }}
      TERRAFORM_HOSTNAME: ${{ secrets.TERRAFORM_HOSTNAME }}
      TF_WORKSPACE:  "develop01"
      TF_ORGANIZATION:  "Adarshk"
      
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        # Change the working directory based on our environment
        working-directory: ${{ github.workspace }}/Infra/east_us

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.8.5
        cli_config_credentials_hostname: ${{ secrets.TERRAFORM_HOSTNAME }}
        cli_config_credentials_token: ${{ secrets.TFE_TOKEN }}

    # - name: Select Terraform Workspace
    #   run: echo "TF_WORKSPACE=${{ inputs.workspace }}" >> $GITHUB_ENV
     
    - name: Make script executable
      run: chmod +x ./generate_backend.sh

    - name: Generate backend.tf
      run:  ./generate_backend.sh

    - name: Verify backend.tf
      run: cat backend.tf 

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init 
      run: terraform init
     
    # # Generates an execution plan for Terraform
    # - name: Terraform Plan 
    #   run: terraform plan -var-file=env/${{ github.event.inputs.workspace }}.tfvars
     
    # - name: Create Approval Issue
    #   uses: trstringer/manual-approval@v1
    #   with:
    #          secret: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
    #          approvers: adarshashokk
    #          minimum-approvals: 1
    #          issue-title: "Deploying ${{ github.event.inputs.workspace }} to ${{ github.event.inputs.workspace }}"
    #          issue-body: |
    #            Review the Terraform plan, then approve or deny the deployment of v1.0.0 to ${{ github.event.inputs.workspace }}.
    #            - [ ] Approve
    #            - [ ] Deny
       
    # - name: Terraform Apply
    #   run: terraform apply -var-file=env/${{ github.event.inputs.workspace }}.tfvars -auto-approve
